server:
  applicationConnectors:
    - type: http
      port: 0
  adminConnectors:
    - type: http
      port: 0

database:
  driverClass: org.postgresql.Driver
  user: ${DB_USER}
  password: ${DB_PASSWORD}
  url: jdbc:postgresql://${DB_HOST}:5432/ledger?sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory&${DB_SSL_OPTION}

  # the maximum amount of time to wait on an empty pool before throwing an exception
  maxWaitForConnection: 1s

  # the SQL query to run when validating a connection's liveness
  validationQuery: "SELECT '1'"

  # the timeout before a connection validation queries fail
  validationQueryTimeout: 3s

  # the minimum number of connections to keep open
  minSize: 2

  initialSize: 2

  # the maximum number of connections to keep open
  maxSize: 2

  # whether or not idle connections should be validated
  checkConnectionWhileIdle: false

  # the amount of time to sleep between runs of the idle connection validation, abandoned cleaner and idle pool resizing
  evictionInterval: 10s

  # the minimum amount of time an connection must sit idle in the pool before it is eligible for eviction
  minIdleTime: 1 minute

logging:
  level: WARN
  appenders:
    - type: logstash-console
      threshold: ALL
      target: stdout
      customFields:
        container: "ledger"

sqsConfig:
  nonStandardServiceEndpoint: ${AWS_SQS_NON_STANDARD_SERVICE_ENDPOINT:-true}
  endpoint: ${AWS_SQS_ENDPOINT:-}
  region: ${AWS_SQS_REGION:-region-1}
  secretKey: ${AWS_SECRET_KEY:-x}
  accessKey: ${AWS_ACCESS_KEY:-x}
  eventQueueUrl: ${AWS_SQS_PAYMENT_EVENT_QUEUE_URL}
  messageMaximumWaitTimeInSeconds: ${AWS_SQS_MESSAGE_MAXIMUM_WAIT_TIME_IN_SECONDS:-20}
  messageMaximumBatchSize: ${AWS_SQS_MESSAGE_MAXIMUM_BATCH_SIZE:-10}

queueMessageReceiverConfig:
  backgroundProcessingEnabled: ${BACKGROUND_PROCESSING_ENABLED:-false}
  threadDelayInMilliseconds: ${QUEUE_MESSAGE_RECEIVER_THREAD_DELAY_IN_MILLISECONDS:-1}
  numberOfThreads: ${QUEUE_MESSAGE_RECEIVER_NUMBER_OF_THREADS:-1}
  messageRetryDelayInSeconds: ${QUEUE_MESSAGE_RETRY_DELAY_IN_SECONDS:-1}

snsConfig:
  snsEnabled: ${SNS_ENABLED:-false}
  nonStandardServiceEndpoint: ${AWS_SNS_NON_STANDARD_SERVICE_ENDPOINT:-false}
  endpoint: ${AWS_SNS_ENDPOINT:-}
  secretKey: ${AWS_SECRET_KEY}
  accessKey: ${AWS_ACCESS_KEY}
  region: ${AWS_SNS_REGION:-eu-west-1}
  cardPaymentEventsTopicArn: ${SNS_TOPIC_CARD_PAYMENT_EVENTS_ARN}

reportingConfig:
  streamingCsvPageSize: ${STREAMING_CSV_PAGE_SIZE:-5000}
  searchQueryTimeoutInSeconds: ${REPORTING_SEARCH_QUERY_TIMEOUT_IN_SECONDS:-55}

ecsContainerMetadataUriV4: ${ECS_CONTAINER_METADATA_URI_V4:-}

expungeOrRedactHistoricalDataConfig:
  expungeAndRedactHistoricalDataEnabled: ${EXPUNGE_AND_REDACT_HISTORICAL_DATA_ENABLED:-true}
  expungeOrRedactDataOlderThanDays: ${EXPUNGE_OR_REDACT_DATA_OLDER_THAN_DAYS:-2555}
  noOfTransactionsToRedact: ${EXPUNGE_NO_OF_TRANSACTIONS_PER_TASK_RUN:-2500}
